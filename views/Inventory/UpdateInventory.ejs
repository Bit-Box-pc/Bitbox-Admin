<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Serial Number Details</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
        }
        
        .container {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-top: 80px;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #ff6900;
        }
        
        .header h1 {
            color: #ff6900;
            margin: 0;
        }
        
        .update-btn {
            background-color: #ffc107;
            color: #333;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            font-weight: bold;
        }
        
        .update-btn:hover {
            background-color: #e0a800;
        }
        
        .info-section {
            background: #fff3e6;
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #ffcc99;
            border-radius: 5px;
        }
        
        .basic-info {
            margin-bottom: 20px;
        }
        
        .spec-heading {
            color: #e65c00;
            font-size: 24px;
            margin-top: 30px;
            margin-bottom: 15px;
        }
        
        .info-row {
            display: flex;
            margin-bottom: 8px;
            padding: 5px 0;
        }
        
        .info-row:nth-child(even) {
            background-color: rgba(255, 255, 255, 0.5);
        }
        
        .info-label {
            flex: 0 0 200px;
            font-weight: bold;
        }
        
        .info-value {
            flex: 1;
        }
        
        .file-link {
            color: blue;
            text-decoration: underline;
            background: none;
            display: inline;
            padding: 0;
            margin: 0;
        }
        
        .file-link:hover {
            color: #0056b3;
        }
        
        /* Popup styles */
        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }
        
        .popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border: 1px solid #ddd;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            z-index: 1000;
            width: 80%;
            max-width: 600px;
            max-height: 90%;
            overflow-y: auto;
        }
        
        .popup input, .popup label, .popup select {
            display: block;
            margin: 10px 0;
            width: 100%;
        }
        
        .popup button {
            background-color: #ff6900;
            color: white;
            border: none;
            padding: 10px 20px;
            margin-top: 10px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        
        .popup button:hover {
            background-color: #e05d00;
        }
        
        .popup .cancel-btn {
            background-color: #ccc;
        }
        
        .popup .cancel-btn:hover {
            background-color: #999;
        }
        
        /* Search and pagination styles */
        .search-bar {
            margin: 20px 0;
            text-align: center;
        }
        
        .search-bar input[type="text"] {
            width: 80%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        
        .pagination button {
            background-color: #ff6900;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            margin: 0 5px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        
        .pagination button:hover {
            background-color: #e05d00;
        }
        
        .pagination .disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        
        /* List view styles */
        ul {
            list-style-type: none;
            padding: 0;
        }
        
        li {
            background: #fff3e6;
            margin: 10px 0;
            padding: 15px;
            border: 1px solid #ffcc99;
            border-radius: 5px;
            display: flex;
            align-items: flex-start;
        }
        
        .serial-details {
            flex: 1;
        }
        
        .actions {
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin-left: 10px;
            border-left: 2px solid #ffcc99;
            padding-left: 10px;
            min-width: 120px;
        }
        
        .actions button {
            margin-bottom: 10px;
        }
        
        /* Style for "No results" message */
        #noResultsMessage {
            display: none;
            text-align: center;
            color: red;
            font-weight: bold;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <!-- Include your navigation bar here as needed -->
    <nav style="display: flex; justify-content: space-between; align-items: center; padding: 1em; background-color: #b0b3c6; color: white; width: 100%; position: fixed; top: 0; left: 0; z-index: 1000;">
        <div class="logo" style="font-size: 1.5em;">
            <img src="/images/BitBox_logo1.png" alt="">
        </div>
       
        <div class="title" style="font-size: 1.2em;color: black;font-weight: 600;margin-right: 100px;">
            Bitbox Admin Panel
        </div>
        <form action="/api/auth/logout" method="POST" style="margin-right: 10px; background-color: #b0b3c6; border: none; align-items: end; justify-content: end; text-align: end; width: 0; margin-right: 100px;">
            <button type="submit" style="background-color: #ff0000; color: white; border: none; padding: 10px; font-size: 1em; cursor: pointer; border-radius: 4px; transition: background-color 0.3s ease;">Logout</button>
        </form>
    </nav>
    
    <div class="container">
        <!-- For single serial view mode -->
        <% if (viewMode === 'detail') { %>
            <div class="header">
                <h1>Serial Number Details</h1>
                <button class="update-btn" onclick="showUpdatePopup('<%= serial._id %>')">Update</button>
            </div>
            
            <div class="info-section basic-info">
                <div class="info-row">
                    <div class="info-label">Serial Number:</div>
                    <div class="info-value"><%= serial.serialNumber %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Model Number:</div>
                    <div class="info-value"><%= serial.modelNumber %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Tested By:</div>
                    <div class="info-value"><%= serial.testedBy %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Uploaded File:</div>
                    <div class="info-value">
                        <% if (serial.uploadedFile) { %>
                            <a href="/uploads/<%= serial.uploadedFile %>" target="_blank" class="file-link"><%= serial.uploadedFile %></a>
                        <% } else { %>
                            N/A
                        <% } %>
                    </div>
                </div>
            </div>
            
            <h2 class="spec-heading">Machine Specification</h2>
            <div class="info-section">
                <div class="info-row">
                    <div class="info-label">Processor:</div>
                    <div class="info-value"><%= serial.processor || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Motherboard:</div>
                    <div class="info-value"><%= serial.motherboard || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">RAM-1:</div>
                    <div class="info-value"><%= serial.RAM1 || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">RAM-2:</div>
                    <div class="info-value"><%= serial.RAM2 || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">RAM-3:</div>
                    <div class="info-value"><%= serial.RAM3 || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">RAM-4:</div>
                    <div class="info-value"><%= serial.RAM4 || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">HDD-1:</div>
                    <div class="info-value"><%= serial.HDD1 || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">HDD-2:</div>
                    <div class="info-value"><%= serial.HDD2 || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">SSD SATA:</div>
                    <div class="info-value"><%= serial.SSD_SATA || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">SSD NVMe:</div>
                    <div class="info-value"><%= serial.SSD_NVMe || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Wifi Module:</div>
                    <div class="info-value"><%= serial.WifiModule || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Software / APP:</div>
                    <div class="info-value"><%= serial.SoftwareApp || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Add-On:</div>
                    <div class="info-value"><%= serial.AddOn || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Graphic Card:</div>
                    <div class="info-value"><%= serial.GraphicCard || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Bluetooth Module:</div>
                    <div class="info-value"><%= serial.BluetoothModule || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Monitor Size:</div>
                    <div class="info-value"><%= serial.monitorSize || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Operating System:</div>
                    <div class="info-value"><%= serial.operatingSystem || 'N/A' %></div>
                </div>
                <div class="info-row">
                    <div class="info-label">Keyboard Mouse Combo:</div>
                    <div class="info-value"><%= serial.keyboardMouseCombo || 'N/A' %></div>
                </div>
            </div>
            
            <% if (serial.dynamicFields && typeof serial.dynamicFields === 'object' && Object.keys(serial.dynamicFields).length > 0) { %>
                <h2 class="spec-heading">Additional Specifications</h2>
                <div class="info-section">
                    <% Object.entries(serial.dynamicFields).forEach(([key, value]) => { %>
                        <% if (!key.startsWith('$') && !key.startsWith('__')) { %>
                            <div class="info-row">
                                <div class="info-label"><%= key %>:</div>
                                <div class="info-value"><%= value || 'N/A' %></div>
                            </div>
                        <% } %>
                    <% }); %>
                </div>
            <% } %>
        <% } else { %>
            <!-- For list view mode with search and pagination -->
            <h2>Search Serial Numbers</h2>
            <div class="search-bar">
                <input type="text" id="searchInput" placeholder="Search by Serial Number..." oninput="filterSerials()">
            </div>
            <p id="noResultsMessage">No matching serial numbers found.</p>

            <div class="serial-info">
                <h2>All Serial Numbers</h2>
                <ul id="serialList">
                    <% serials.forEach(serial => { %>
                        <li>
                            <div class="serial-details">
                                <strong>Serial Number:</strong> <%= serial.serialNumber %><br>
                                <strong>Model Number:</strong> <%= serial.modelNumber %><br>
                                <strong>Tested By:</strong> <%= serial.testedBy %><br>
                                <strong>Uploaded File:</strong> <a href="/uploads/<%= serial.uploadedFile %>" target="_blank" class="file-link"><%= serial.uploadedFile %></a><br>
                                <h2 style="color: #e65c00;text-align: left;">Machine Specification:</h2>
                                <strong>Processor:</strong> <%= serial.processor || 'N/A' %><br>
                                <strong>Motherboard:</strong> <%= serial.motherboard || 'N/A' %><br>
                                <strong>RAM-1:</strong> <%= serial.RAM1 || 'N/A' %><br>
                                <strong>RAM-2:</strong> <%= serial.RAM2 || 'N/A' %><br>
                                <strong>RAM-3:</strong> <%= serial.RAM3 || 'N/A' %><br>
                                <strong>RAM-4:</strong> <%= serial.RAM4 || 'N/A' %><br>
                                <strong>HDD-1:</strong> <%= serial.HDD1 || 'N/A' %><br>
                                <strong>HDD-2:</strong> <%= serial.HDD2 || 'N/A' %><br>
                                <strong>SSD SATA:</strong> <%= serial.SSD_SATA || 'N/A' %><br>
                                <strong>SSD NVMe:</strong> <%= serial.SSD_NVMe || 'N/A' %><br>
                                <strong>Wifi Module:</strong> <%= serial.WifiModule || 'N/A' %><br>
                                <strong>Software / APP:</strong> <%= serial.SoftwareApp || 'N/A' %><br>
                                <strong>Add-On:</strong> <%= serial.AddOn || 'N/A' %><br>
                                <strong>Graphic Card:</strong> <%= serial.GraphicCard || 'N/A' %><br>
                                <strong>Bluetooth Module:</strong> <%= serial.BluetoothModule || 'N/A' %><br>
                                <strong>Monitor Size:</strong> <%= serial.monitorSize || 'N/A' %><br>
                                <strong>Operating System:</strong> <%= serial.operatingSystem || 'N/A' %><br>
                                <strong>Keyboard Mouse Combo:</strong> <%= serial.keyboardMouseCombo || 'N/A' %><br>
                                
                                <!-- Dynamic Fields -->
                                <% if (serial.dynamicFields && typeof serial.dynamicFields === 'object' && Object.keys(serial.dynamicFields).length > 0) { %>
                                    <% Object.entries(serial.dynamicFields).forEach(([key, value]) => { %>
                                        <% if (!key.startsWith('$') && !key.startsWith('__')) { %>
                                            <strong><%= key %>:</strong> <%= value || 'N/A' %><br>
                                        <% } %>
                                    <% }); %>
                                <% } %>
                            </div>

                            <div class="actions">
                                <button class="update-btn" onclick="showUpdatePopup('<%= serial._id %>')">Update</button>
                                <a href="/api/inventoryManagement/view-serial/<%= serial._id %>" class="view-btn" style="display: block; text-align: center; background-color: #007bff; color: white; padding: 10px; margin-bottom: 10px; text-decoration: none; border-radius: 5px;">View Details</a>
                            </div>
                        </li>
                    <% }); %>
                </ul>
            </div>
            <div class="pagination">
                <button id="prevBtn" onclick="prevPage()">Previous</button>
                <button id="nextBtn" onclick="nextPage()">Next</button>
            </div>
        <% } %>
    </div>
    
    <!-- Update Popup -->
    <div id="overlay" class="overlay" onclick="hideUpdatePopup()"></div>
    <div id="updatePopup" class="popup">
        <h2>Update Serial Number</h2>
        <form id="updateForm" action="/api/inventoryManagement/Inventory-update" method="POST" enctype="multipart/form-data">
            <input type="hidden" id="updateId" name="id">
            
            <!-- Basic information -->
            <label for="updateSerialNumber">Serial Number:</label>
            <input type="text" id="updateSerialNumber" name="serialNumber" required>
            
            <label for="updateModelNumber">Model Number:</label>
            <input type="text" id="updateModelNumber" name="modelNumber" required>
            
            <label for="updateTestedBy">Tester:</label>
            <select id="updateTestedBy" name="testedBy">
                <% testers.forEach(tester => { %>
                    <option value="<%= tester._id %>"><%= tester.name %></option>
                <% }); %>
            </select>
            
            <label for="updateUploadedFile">Upload File:</label>
            <input type="file" id="updateUploadedFile" name="uploadedFile">
            <p><small>Leave empty to keep current file</small></p>
            
            <!-- Specifications -->
            <label for="updateProcessor">Processor:</label>
            <input type="text" id="updateProcessor" name="processor">
            
            <label for="updateMotherboard">Motherboard:</label>
            <input type="text" id="updateMotherboard" name="motherboard">
            
            <label for="updateRAM1">RAM-1:</label>
            <input type="text" id="updateRAM1" name="RAM1">
            
            <label for="updateRAM2">RAM-2:</label>
            <input type="text" id="updateRAM2" name="RAM2">
            
            <label for="updateRAM3">RAM-3:</label>
            <input type="text" id="updateRAM3" name="RAM3">
            
            <label for="updateRAM4">RAM-4:</label>
            <input type="text" id="updateRAM4" name="RAM4">
            
            <label for="updateHDD1">HDD-1:</label>
            <input type="text" id="updateHDD1" name="HDD1">
            
            <label for="updateHDD2">HDD-2:</label>
            <input type="text" id="updateHDD2" name="HDD2">
            
            <label for="updateSSD_SATA">SSD SATA:</label>
            <input type="text" id="updateSSD_SATA" name="SSD_SATA">
            
            <label for="updateSSD_NVMe">SSD NVMe:</label>
            <input type="text" id="updateSSD_NVMe" name="SSD_NVMe">

            <label for="updateGraphicCard">Graphic Card:</label>
            <input type="text" id="updateGraphicCard" name="GraphicCard">
            
            <label for="updateBluetoothModule">Bluetooth Module:</label>
            <input type="text" id="updateBluetoothModule" name="BluetoothModule">
            
            <label for="updateWifiModule">Wifi Module:</label>
            <input type="text" id="updateWifiModule" name="WifiModule">

            <label for="updateMonitorSize">Monitor Size:</label>
            <input type="text" id="updateMonitorSize" name="monitorSize">
            
            <label for="updateOperatingSystem">Operating System:</label>
            <input type="text" id="updateOperatingSystem" name="operatingSystem">
            
            <label for="updateKeyboardMouseCombo">Keyboard Mouse Combo:</label>
            <input type="text" id="updateKeyboardMouseCombo" name="keyboardMouseCombo">
            
            <label for="updateSoftwareApp">Software / APP:</label>
            <input type="text" id="updateSoftwareApp" name="SoftwareApp">
            
            <label for="updateAddOn">Add-On:</label>
            <input type="text" id="updateAddOn" name="AddOn">
            
            <!-- Dynamic Fields -->
            <div id="updateDynamicFields">
                <!-- Dynamic fields will be populated here -->
            </div>
    
            <button type="submit">Update Serial</button>
            <button type="button" class="cancel-btn" onclick="hideUpdatePopup()">Cancel</button>
        </form>
    </div>
    
    <script>
        // Variables for pagination
        let currentPage = 1;
        const itemsPerPage = 10;
        
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize page display
            if (document.getElementById('serialList')) {
                showPage(currentPage);
                updatePaginationButtons();
            }
        });

        function nextPage() {
            const totalPages = Math.ceil(getVisibleItems().length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                showPage(currentPage);
                updatePaginationButtons();
            }
        }

        function prevPage() {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
                updatePaginationButtons();
            }
        }

        function getVisibleItems() {
            const serialList = document.getElementById('serialList');
            if (!serialList) return [];
            
            return Array.from(serialList.children).filter(serial => 
                serial.style.display !== 'none' && getComputedStyle(serial).display !== 'none'
            );
        }

        function filterSerials() {
            const filter = document.getElementById('searchInput').value.toUpperCase();
            const serialList = document.getElementById('serialList');
            if (!serialList) return;
            
            const serials = serialList.getElementsByTagName('li');
            let visibleCount = 0;

            Array.from(serials).forEach(serial => {
                const serialDetails = serial.querySelector('.serial-details').textContent.toUpperCase();
                if (serialDetails.includes(filter)) {
                    serial.style.display = '';
                    visibleCount++;
                } else {
                    serial.style.display = 'none';
                }
            });

            // Show or hide "no results" message
            const noResultsMessage = document.getElementById('noResultsMessage');
            if (noResultsMessage) {
                noResultsMessage.style.display = visibleCount === 0 ? 'block' : 'none';
            }

            currentPage = 1;
            updatePaginationButtons();
            showPage(currentPage);
        }

        function updatePaginationButtons() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            
            if (!prevBtn || !nextBtn) return;
            
            const visibleItems = getVisibleItems();
            const totalPages = Math.ceil(visibleItems.length / itemsPerPage);
            
            prevBtn.disabled = currentPage === 1;
            prevBtn.classList.toggle('disabled', currentPage === 1);
            
            nextBtn.disabled = currentPage === totalPages || totalPages === 0;
            nextBtn.classList.toggle('disabled', currentPage === totalPages || totalPages === 0);
        }

        function showPage(page) {
            const visibleItems = getVisibleItems();
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            visibleItems.forEach((item, index) => {
                if (index >= startIndex && index < endIndex) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function showUpdatePopup(id) {
            // Find the serial item in the DOM (works for both detail and list view)
            let item;
            
            if (document.querySelector('.serial-details')) {
                // We're in detail view
                item = document.querySelector('.serial-details').closest('div');
            } else {
                // We're in list view
                item = document.querySelector(`li .update-btn[onclick*="${id}"]`).closest('li');
            }
            
            if (!item) {
                console.error("Serial item not found for ID:", id);
                return;
            }

            // Extract data from the item for update form
            let serialNumber, modelNumber, testedBy;
            
            // Different extraction method based on view type
            if (item.querySelector('.info-value')) {
                // Detail view
                serialNumber = item.querySelector('.info-row:nth-child(1) .info-value').textContent.trim();
                modelNumber = item.querySelector('.info-row:nth-child(2) .info-value').textContent.trim();
                testedBy = item.querySelector('.info-row:nth-child(3) .info-value').textContent.trim();
            } else {
                // List view
                const serialDetails = item.querySelector('.serial-details');
                serialNumber = serialDetails.innerHTML.match(/<strong>Serial Number:<\/strong> ([^<]+)<br>/)[1].trim();
                modelNumber = serialDetails.innerHTML.match(/<strong>Model Number:<\/strong> ([^<]+)<br>/)[1].trim();
                testedBy = serialDetails.innerHTML.match(/<strong>Tested By:<\/strong> ([^<]+)<br>/)[1].trim();
            }
            
            // Get other fields using a helper function
            function getFieldValue(fieldName) {
                if (item.querySelector('.info-value')) {
                    // Detail view - find by label
                    const rows = item.querySelectorAll('.info-row');
                    for (let row of rows) {
                        const label = row.querySelector('.info-label');
                        if (label && label.textContent.includes(fieldName + ':')) {
                            return row.querySelector('.info-value').textContent.trim();
                        }
                    }
                    return '';
                } else {
                    // List view - find by regex
                    const regex = new RegExp(`<strong>${fieldName}:<\\/strong> ([^<]+)<br>`, 'i');
                    const match = item.querySelector('.serial-details').innerHTML.match(regex);
                    return match ? match[1].trim() : '';
                }
            }

            // Set form values
            document.getElementById('updateId').value = id;
            document.getElementById('updateSerialNumber').value = serialNumber;
            document.getElementById('updateModelNumber').value = modelNumber;
            
            // Try to select the correct tester in the dropdown
            const testerSelect = document.getElementById('updateTestedBy');
            for (let i = 0; i < testerSelect.options.length; i++) {
                if (testerSelect.options[i].text === testedBy) {
                    testerSelect.selectedIndex = i;
                    break;
                }
            }
            
            // Set other field values
            document.getElementById('updateProcessor').value = getFieldValue('Processor').replace('N/A', '');
            document.getElementById('updateMotherboard').value = getFieldValue('Motherboard').replace('N/A', '');
            document.getElementById('updateRAM1').value = getFieldValue('RAM-1').replace('N/A', '');
            document.getElementById('updateRAM2').value = getFieldValue('RAM-2').replace('N/A', '');
            document.getElementById('updateRAM3').value = getFieldValue('RAM-3').replace('N/A', '');
            document.geStElementById('updateRAM4').value = getFieldValue('RAM-4').replace('N/A', '');
            document.getElementById('updateHDD1').value = getFieldValue('HDD-1').replace('N/A', '');
            document.getElementById('updateHDD2').valuedocument.getElementById('updateHDD1').value = getFieldValue('HDD-1').replace('N/A', '');
            document.getElementById('updateHDD2').value = getFieldValue('HDD-2').replace('N/A', '');
            document.getElementById('updateSSD_SATA').value = getFieldValue('SSD SATA').replace('N/A', '');
            document.getElementById('updateSSD_NVMe').value = getFieldValue('SSD NVMe').replace('N/A', '');
            document.getElementById('updateWifiModule').value = getFieldValue('Wifi Module').replace('N/A', '');
            document.getElementById('updateSoftwareApp').value = getFieldValue('Software / APP').replace('N/A', '');
            document.getElementById('updateAddOn').value = getFieldValue('Add-On').replace('N/A', '');
            document.getElementById('updateGraphicCard').value = getFieldValue('Graphic Card').replace('N/A', '');
            document.getElementById('updateBluetoothModule').value = getFieldValue('Bluetooth Module').replace('N/A', '');
            document.getElementById('updateMonitorSize').value = getFieldValue('Monitor Size').replace('N/A', '');
            document.getElementById('updateOperatingSystem').value = getFieldValue('Operating System').replace('N/A', '');
            document.getElementById('updateKeyboardMouseCombo').value = getFieldValue('Keyboard Mouse Combo').replace('N/A', '');

            // Clear and rebuild dynamic fields
            const dynamicFieldsContainer = document.getElementById('updateDynamicFields');
            dynamicFieldsContainer.innerHTML = '';
            
            // Extract dynamic fields - different approach for each view type
            if (item.querySelector('.info-section')) {
                // Detail view - check if we have additional specs section
                const additionalSpecsSection = document.querySelector('h2.spec-heading + .info-section:last-of-type');
                if (additionalSpecsSection) {
                    const dynamicRows = additionalSpecsSection.querySelectorAll('.info-row');
                    dynamicRows.forEach(row => {
                        const labelElement = row.querySelector('.info-label');
                        const valueElement = row.querySelector('.info-value');
                        
                        if (labelElement && valueElement) {
                            const fieldName = labelElement.textContent.replace(':', '').trim();
                            const fieldValue = valueElement.textContent.replace('N/A', '').trim();
                            
                            // Skip any standard fields that might be here by mistake
                            if (['Serial Number', 'Model Number', 'Tested By', 'Processor', 
                                'Motherboard', 'RAM-1', 'RAM-2', 'RAM-3', 'RAM-4', 'HDD-1', 
                                'HDD-2', 'SSD SATA', 'SSD NVMe', 'Wifi Module', 'Software / APP', 
                                'Add-On', 'Graphic Card', 'Bluetooth Module', 'Monitor Size', 
                                'Operating System', 'Keyboard Mouse Combo'].includes(fieldName)) {
                                return;
                            }
                            
                            dynamicFieldsContainer.innerHTML += `
                                <label for="updateDynamicField_${fieldName}">${fieldName}:</label>
                                <input type="text" id="updateDynamicField_${fieldName}" name="dynamicFields[${fieldName}]" value="${fieldValue}">
                            `;
                        }
                    });
                }
            } else {
                // List view - use regex to find dynamic fields
                const dynamicFieldsRegex = /<strong>([^<:]+):<\/strong> ([^<]+)<br>/g;
                const content = item.querySelector('.serial-details').innerHTML;
                
                // Get the index of the last standard field
                const lastStandardField = 'Keyboard Mouse Combo:';
                const lastStandardIndex = content.indexOf(lastStandardField);
                
                if (lastStandardIndex !== -1) {
                    const dynamicFieldsContent = content.substring(lastStandardIndex + lastStandardField.length);
                    let match;
                    
                    // Find all dynamic fields after the standard fields
                    while ((match = dynamicFieldsRegex.exec(dynamicFieldsContent)) !== null) {
                        const fieldName = match[1].trim();
                        const fieldValue = match[2].trim();
                        
                        // Skip any standard fields or internal properties
                        if (['Serial Number', 'Model Number', 'Tested By', 'Processor', 
                             'Motherboard', 'RAM-1', 'RAM-2', 'RAM-3', 'RAM-4', 'HDD-1', 
                             'HDD-2', 'SSD SATA', 'SSD NVMe', 'Wifi Module', 'Software / APP', 
                             'Add-On', 'Graphic Card', 'Bluetooth Module', 'Monitor Size', 
                             'Operating System', 'Keyboard Mouse Combo'].includes(fieldName) ||
                             fieldName.startsWith('$') || fieldName.startsWith('__')) {
                            continue;
                        }
                        
                        dynamicFieldsContainer.innerHTML += `
                            <label for="updateDynamicField_${fieldName}">${fieldName}:</label>
                            <input type="text" id="updateDynamicField_${fieldName}" name="dynamicFields[${fieldName}]" value="${fieldValue === 'N/A' ? '' : fieldValue}">
                        `;
                    }
                }
            }

            // Show the popup
            document.getElementById('overlay').style.display = 'block';
            document.getElementById('updatePopup').style.display = 'block';
        }

        function hideUpdatePopup() {
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('updatePopup').style.display = 'none';
        }

        // Form validation
        document.getElementById('updateForm').addEventListener('submit', function(event) {
            // Basic validation
            const serialNumber = document.getElementById('updateSerialNumber').value;
            const modelNumber = document.getElementById('updateModelNumber').value;
            
            if (!serialNumber.trim()) {
                alert('Serial Number is required');
                event.preventDefault();
                return;
            }
            
            if (!modelNumber.trim()) {
                alert('Model Number is required');
                event.preventDefault();
                return;
            }
        });
    </script>
</body>
</html>