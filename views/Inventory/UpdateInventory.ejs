<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Admin Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
        }

        .container {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-top: 80px;
        }

        h1, h2 {
            text-align: center;
            color: #ff6900;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        li {
            background: #fff3e6;
            margin: 10px 0;
            padding: 15px;
            border: 1px solid #ffcc99;
            border-radius: 5px;
            display: flex;
            align-items: flex-start;
        }

        .serial-details {
            flex: 1;
        }

        .actions {
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin-left: 10px;
            border-left: 2px solid #ffcc99;
            padding-left: 10px;
            min-width: 120px;
        }

        .actions button {
            margin-bottom: 10px;
        }

        button, input[type="submit"] {
            background-color: #ff6900;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        button:hover, input[type="submit"]:hover {
            background-color: #e05d00;
        }

        .delete-btn {
            background-color: #ff0000;
        }

        .delete-btn:hover {
            background-color: #cc0000;
        }

        .update-btn {
            background-color: #ffcc00;
            color: #333;
        }

        .update-btn:hover {
            background-color: #e6b800;
        }

        a {
            display: inline-block;
            text-align: center;
            background-color: #ff6900;
            color: white;
            padding: 10px 20px;
            margin: 20px 0;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        a:hover {
            background-color: #e05d00;
        }

        .search-bar {
            margin: 20px 0;
            text-align: center;
        }

        .search-bar input[type="text"] {
            width: 80%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        /* CSS for the popup form */
        .popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border: 1px solid #ddd;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            z-index: 1000;
            width: 80%;
            max-width: 600px;
            max-height: 90%;
            overflow-y: auto; /* Enable vertical scroll */
        }

        .popup input, .popup label, .popup select {
            display: block;
            margin: 10px 0;
            width: 100%;
        }

        .popup button {
            background-color: #ff6900;
            color: white;
            border: none;
            padding: 10px 20px;
            margin-top: 10px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .popup button:hover {
            background-color: #e05d00;
        }

        .popup .cancel-btn {
            background-color: #ccc;
        }

        .popup .cancel-btn:hover {
            background-color: #999;
        }

        #updatePopup::-webkit-scrollbar {
            display: none;
        }

        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .pagination button {
            background-color: #ff6900;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            margin: 0 5px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .pagination button:hover {
            background-color: #e05d00;
        }

        .pagination .disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        
        .file-link {
            background: none;
            color: blue;
            text-decoration: underline;
            padding: 0;
            margin: 0;
            display: inline;
        }
        
        .file-link:hover {
            background: none;
            color: darkblue;
        }
    </style>
</head>
<body>
    <nav style="display: flex; justify-content: space-between; align-items: center; padding: 1em; background-color: #b0b3c6; color: white; width: 100%; position: fixed; top: 0; left: 0; z-index: 1000;">
        <div class="logo" style="font-size: 1.5em;">
            <img src="/images/BitBox_logo1.png" alt="">
        </div>
       
        <div class="title" style="font-size: 1.2em;color: black;font-weight: 600;margin-right: 100px;">
            Bitbox Admin Panel
        </div>
        <form action="/api/auth/logout" method="POST" style="margin-right: 10px; background-color: #b0b3c6; border: none; align-items: end; justify-content: end; text-align: end; width: 0; margin-right: 100px;">
            <button type="submit" style="background-color: #ff0000; color: white; border: none; padding: 10px; font-size: 1em; cursor: pointer; border-radius: 4px; transition: background-color 0.3s ease;">Logout</button>
        </form>
    </nav>

    <div class="container" style="margin-top: 8%;">
        <h2>Search Serial Numbers</h2>
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search by Serial Number..." oninput="filterSerials()">
        </div>

        <div class="serial-info">
            <h2>All Serial Numbers</h2>
            <ul id="serialList">
                <% serials.forEach(serial => { %>
                    <li>
                        <div class="serial-details">
                            <strong>Serial Number:</strong> <%= serial.serialNumber %><br>
                            <strong>Model Number:</strong> <%= serial.modelNumber %><br>
                            <strong>Tested By:</strong> <%= serial.testedBy %><br>
                            <strong>Uploaded File:</strong> <a href="/uploads/<%= serial.uploadedFile %>" target="_blank" class="file-link"><%= serial.uploadedFile %></a><br>
                            <h2 style="color: #e65c00;text-align: left;">Machine Specification:</h2>
                            <strong>Processor:</strong> <%= serial.processor %><br>
                            <strong>Motherboard:</strong> <%= serial.motherboard %><br>
                            <strong>RAM-1:</strong> <%= serial.RAM1 %><br>
                            <strong>RAM-2:</strong> <%= serial.RAM2 %><br>
                            <strong>RAM-3:</strong> <%= serial.RAM3 %><br>
                            <strong>RAM-4:</strong> <%= serial.RAM4 %><br>
                            <strong>HDD-1:</strong> <%= serial.HDD1 %><br>
                            <strong>HDD-2:</strong> <%= serial.HDD2 %><br>
                            <strong>SSD SATA:</strong> <%= serial.SSD_SATA %><br>
                            <strong>SSD NVMe:</strong> <%= serial.SSD_NVMe %><br>
                            <strong>Wifi Module:</strong> <%= serial.WifiModule %><br>
                            <strong>Software / APP:</strong> <%= serial.SoftwareApp %><br>
                            <strong>Add-On:</strong> <%= serial.AddOn %><br>
                            <strong>Graphic Card:</strong> <%= serial.GraphicCard %><br>
                            <strong>Bluetooth Module:</strong> <%= serial.BluetoothModule %><br>
                            <strong>Monitor Size:</strong> <%= serial.monitorSize %><br>
                            <strong>Operating System:</strong> <%= serial.operatingSystem %><br>
                            <strong>Keyboard Mouse Combo:</strong> <%= serial.keyboardMouseCombo %><br>
                            
                            <!-- Dynamic Fields -->
                            <% if (serial.dynamicFields && Object.keys(serial.dynamicFields).length > 0) { %>
                                <% for (const [key, value] of Object.entries(serial.dynamicFields)) { %>
                                    <strong><%= key %>:</strong> <%= value %><br>
                                <% } %>
                            <% } %>
                        </div>

                        <div class="actions">
                            <button class="update-btn" onclick="showUpdatePopup('<%= serial._id %>')">Update</button>
                            
                        </div>
                    </li>
                <% }) %>
            </ul>
        </div>
        <div class="pagination">
            <button id="prevBtn" onclick="prevPage()">Previous</button>
            <button id="nextBtn" onclick="nextPage()">Next</button>
        </div>
    </div>

    <!-- Global overlay and popup for all items -->
    <div id="overlay" class="overlay" onclick="hideUpdatePopup()"></div>
    <div id="updatePopup" class="popup">
        <h2>Update Serial Number</h2>
        <form id="updateForm" action="/api/inventoryManagement/Inventory-update" method="POST" enctype="multipart/form-data">
            <input type="hidden" id="updateId" name="id">
    
            <!-- Basic information -->
            <label for="updateSerialNumber">Serial Number:</label>
            <input type="text" id="updateSerialNumber" name="serialNumber" required>
            
            <label for="updateModelNumber">Model Number:</label>
            <input type="text" id="updateModelNumber" name="modelNumber" required>
            
            <label for="updateTestedBy">Tester:</label>
            <select id="updateTestedBy" name="testedBy">
                <% testers.forEach(tester => { %>
                    <option value="<%= tester._id %>"><%= tester.name %></option>
                <% }) %>
            </select>
            
            <label for="updateUploadedFile">Upload File:</label>
            <input type="file" id="updateUploadedFile" name="uploadedFile">
            <p><small>Leave empty to keep current file</small></p>
            
            <!-- Specifications -->
            <label for="updateProcessor">Processor:</label>
            <input type="text" id="updateProcessor" name="processor">
            
            <label for="updateMotherboard">Motherboard:</label>
            <input type="text" id="updateMotherboard" name="motherboard">
            
            <label for="updateRAM1">RAM-1:</label>
            <input type="text" id="updateRAM1" name="RAM1">
            
            <label for="updateRAM2">RAM-2:</label>
            <input type="text" id="updateRAM2" name="RAM2">
            
            <label for="updateRAM3">RAM-3:</label>
            <input type="text" id="updateRAM3" name="RAM3">
            
            <label for="updateRAM4">RAM-4:</label>
            <input type="text" id="updateRAM4" name="RAM4">
            
            <label for="updateHDD1">HDD-1:</label>
            <input type="text" id="updateHDD1" name="HDD1">
            
            <label for="updateHDD2">HDD-2:</label>
            <input type="text" id="updateHDD2" name="HDD2">
            
            <label for="updateSSD_SATA">SSD SATA:</label>
            <input type="text" id="updateSSD_SATA" name="SSD_SATA">
            
            <label for="updateSSD_NVMe">SSD NVMe:</label>
            <input type="text" id="updateSSD_NVMe" name="SSD_NVMe">

            <label for="updateGraphicCard">Graphic Card:</label>
            <input type="text" id="updateGraphicCard" name="GraphicCard">
            
            <label for="updateBluetoothModule">Bluetooth Module:</label>
            <input type="text" id="updateBluetoothModule" name="BluetoothModule">
            
            <label for="updateWifiModule">Wifi Module:</label>
            <input type="text" id="updateWifiModule" name="WifiModule">

            <label for="updateMonitorSize">Monitor Size:</label>
            <input type="text" id="updateMonitorSize" name="monitorSize">
            
            <label for="updateOperatingSystem">Operating System:</label>
            <input type="text" id="updateOperatingSystem" name="operatingSystem">
            
            <label for="updateKeyboardMouseCombo">Keyboard Mouse Combo:</label>
            <input type="text" id="updateKeyboardMouseCombo" name="keyboardMouseCombo">
            
            <label for="updateSoftwareApp">Software / APP:</label>
            <input type="text" id="updateSoftwareApp" name="SoftwareApp">
            
            <label for="updateAddOn">Add-On:</label>
            <input type="text" id="updateAddOn" name="AddOn">
            
            <!-- Dynamic Fields -->
            <div id="updateDynamicFields">
                <!-- Dynamic fields will be populated here -->
            </div>
    
            <button type="submit">Update Serial</button>
            <button type="button" class="cancel-btn" onclick="hideUpdatePopup()">Cancel</button>
        </form>
    </div>

    <script>
        let currentPage = 1;
        const itemsPerPage = 10;
        let serialsData = []; // Store serialsData globally

        document.addEventListener('DOMContentLoaded', () => {
            // Store all serialsData for use in the update popup
            try {
                const listItems = document.querySelectorAll('#serialList li');
                listItems.forEach((item, index) => {
                    const serialId = item.querySelector('.update-btn').getAttribute('onclick').match(/'([^']+)'/)[1];
                    serialsData.push({
                        id: serialId,
                        element: item
                    });
                });
            } catch (error) {
                console.error("Error initializing serialsData:", error);
            }
            
            showPage(currentPage);
            updatePaginationButtons();
        });

        function nextPage() {
            const totalPages = Math.ceil(getVisibleItems().length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                showPage(currentPage);
                updatePaginationButtons();
            }
        }

        function prevPage() {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
                updatePaginationButtons();
            }
        }

        function getVisibleItems() {
            const serialList = document.getElementById('serialList');
            return Array.from(serialList.children).filter(serial => 
                serial.style.display !== 'none' && getComputedStyle(serial).display !== 'none'
            );
        }

        function filterSerials() {
            const filter = document.getElementById('searchInput').value.toUpperCase();
            const serialList = document.getElementById('serialList');
            const serials = serialList.getElementsByTagName('li');
            let visibleCount = 0;

            Array.from(serials).forEach(serial => {
                const serialDetails = serial.querySelector('.serial-details').textContent.toUpperCase();
                if (serialDetails.includes(filter)) {
                    serial.style.display = '';
                    visibleCount++;
                } else {
                    serial.style.display = 'none';
                }
            });

            currentPage = 1;
            updatePaginationButtons();
            showPage(currentPage);
        }

        function updatePaginationButtons() {
            const visibleItems = getVisibleItems();
            const totalPages = Math.ceil(visibleItems.length / itemsPerPage);
            
            document.getElementById('prevBtn').disabled = currentPage === 1;
            document.getElementById('prevBtn').classList.toggle('disabled', currentPage === 1);
            
            document.getElementById('nextBtn').disabled = currentPage === totalPages || totalPages === 0;
            document.getElementById('nextBtn').classList.toggle('disabled', currentPage === totalPages || totalPages === 0);
        }

        function showPage(page) {
            const visibleItems = getVisibleItems();
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            visibleItems.forEach((item, index) => {
                if (index >= startIndex && index < endIndex) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function showUpdatePopup(id) {
            // Find the serial item in the DOM
            const item = document.querySelector(`li .update-btn[onclick*="${id}"]`).closest('li');
            if (!item) {
                console.error("Serial item not found for ID:", id);
                return;
            }

            // Extract all needed data from the item
            const serialNumber = item.querySelector('.serial-details')
                .innerHTML.match(/<strong>Serial Number:<\/strong> ([^<]+)<br>/)[1].trim();
                
            const modelNumber = item.querySelector('.serial-details')
                .innerHTML.match(/<strong>Model Number:<\/strong> ([^<]+)<br>/)[1].trim();
                
            const testedBy = item.querySelector('.serial-details')
                .innerHTML.match(/<strong>Tested By:<\/strong> ([^<]+)<br>/)[1].trim();
                
            // Get other fields using a helper function
            function getFieldValue(fieldName) {
                const regex = new RegExp(`<strong>${fieldName}:<\\/strong> ([^<]+)<br>`, 'i');
                const match = item.querySelector('.serial-details').innerHTML.match(regex);
                return match ? match[1].trim() : '';
            }

            // Set form values
            document.getElementById('updateId').value = id;
            document.getElementById('updateSerialNumber').value = serialNumber;
            document.getElementById('updateModelNumber').value = modelNumber;
            
            // Try to select the correct tester in the dropdown
            const testerSelect = document.getElementById('updateTestedBy');
            for (let i = 0; i < testerSelect.options.length; i++) {
                if (testerSelect.options[i].text === testedBy) {
                    testerSelect.selectedIndex = i;
                    break;
                }
            }
            
            // Set other field values
            document.getElementById('updateProcessor').value = getFieldValue('Processor');
            document.getElementById('updateMotherboard').value = getFieldValue('Motherboard');
            document.getElementById('updateRAM1').value = getFieldValue('RAM-1');
            document.getElementById('updateRAM2').value = getFieldValue('RAM-2');
            document.getElementById('updateRAM3').value = getFieldValue('RAM-3');
            document.getElementById('updateRAM4').value = getFieldValue('RAM-4');
            document.getElementById('updateHDD1').value = getFieldValue('HDD-1');
            document.getElementById('updateHDD2').value = getFieldValue('HDD-2');
            document.getElementById('updateSSD_SATA').value = getFieldValue('SSD SATA');
            document.getElementById('updateSSD_NVMe').value = getFieldValue('SSD NVMe');
            document.getElementById('updateWifiModule').value = getFieldValue('Wifi Module');
            document.getElementById('updateSoftwareApp').value = getFieldValue('Software / APP');
            document.getElementById('updateAddOn').value = getFieldValue('Add-On');
            document.getElementById('updateGraphicCard').value = getFieldValue('Graphic Card');
            document.getElementById('updateBluetoothModule').value = getFieldValue('Bluetooth Module');
            document.getElementById('updateMonitorSize').value = getFieldValue('Monitor Size');
            document.getElementById('updateOperatingSystem').value = getFieldValue('Operating System');
            document.getElementById('updateKeyboardMouseCombo').value = getFieldValue('Keyboard Mouse Combo');

            // Clear and rebuild dynamic fields
            const dynamicFieldsContainer = document.getElementById('updateDynamicFields');
            dynamicFieldsContainer.innerHTML = '';
            
            // Look for dynamic fields - they appear after all the standard fields
            const dynamicFieldsRegex = /<strong>([^<:]+):<\/strong> ([^<]+)<br>/g;
            const content = item.querySelector('.serial-details').innerHTML;
            
            // Get the index of the last standard field
            const lastStandardField = 'Keyboard Mouse Combo:';
            const lastStandardIndex = content.indexOf(lastStandardField);
            
            if (lastStandardIndex !== -1) {
                const dynamicFieldsContent = content.substring(lastStandardIndex + lastStandardField.length);
                let match;
                
                // Find all dynamic fields after the standard fields
                while ((match = dynamicFieldsRegex.exec(dynamicFieldsContent)) !== null) {
                    const fieldName = match[1].trim();
                    const fieldValue = match[2].trim();
                    
                    // Skip any standard fields that might be matched by mistake
                    if (['Serial Number', 'Model Number', 'Tested By', 'Processor', 
                         'Motherboard', 'RAM-1', 'RAM-2', 'RAM-3', 'RAM-4', 'HDD-1', 
                         'HDD-2', 'SSD SATA', 'SSD NVMe', 'Wifi Module', 'Software / APP', 
                         'Add-On', 'Graphic Card', 'Bluetooth Module', 'Monitor Size', 
                         'Operating System', 'Keyboard Mouse Combo'].includes(fieldName)) {
                        continue;
                    }
                    
                    dynamicFieldsContainer.innerHTML += `
                        <label for="updateDynamicField_${fieldName}">${fieldName}:</label>
                        <input type="text" id="updateDynamicField_${fieldName}" name="dynamicFields[${fieldName}]" value="${fieldValue}">
                    `;
                }
            }

            // Show the popup
            document.getElementById('overlay').style.display = 'block';
            document.getElementById('updatePopup').style.display = 'block';
        }

        function hideUpdatePopup() {
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('updatePopup').style.display = 'none';
        }

        function deleteSerial(id) {
            if (confirm('Are you sure you want to delete this serial number?')) {
                window.location.href = `/api/inventoryManagement/Inventory-delete/${id}`;
            }
        }

        // Form validation
        document.getElementById('updateForm').addEventListener('submit', function(event) {
            // Basic validation
            const serialNumber = document.getElementById('updateSerialNumber').value;
            const modelNumber = document.getElementById('updateModelNumber').value;
            
            if (!serialNumber.trim()) {
                alert('Serial Number is required');
                event.preventDefault();
                return;
            }
            
            if (!modelNumber.trim()) {
                alert('Model Number is required');
                event.preventDefault();
                return;
            }
        });
    </script>
</body>
</html>