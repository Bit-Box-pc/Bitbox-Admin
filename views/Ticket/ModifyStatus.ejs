<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Issue Ticket Admin Page</title>
    <style>
        body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding-top: 70px; /* Add padding to account for the fixed nav bar */
}

.container {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 80%;
    max-width: 800px;
    margin: 20px auto; /* Center the container and add some top margin */
    display: flex;
    flex-direction: column;
    align-items: center;
}

.search-bar {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
}

.search-bar input {
    width: 60%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.tickets {
    width: 100%;
}

.ticket-item {
    padding: 15px;
    border: 1px solid #ccc;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.ticket-item p {
    margin: 5px 0;
}

.ticket-item strong {
    color: #333;
}

.status-dropdown {
    margin-top: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.status-dropdown select {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 70%;
}

.update-button {
    padding: 10px 20px;
    border: none;
    background-color: #28a745;
    color: #fff;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.update-button:hover {
    background-color: #218838;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1em;
    background-color: #b0b3c6;
    color: white;
    width: 100%;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1000;
}

.logo img {
    height: 40px;
}

.title {
    font-size: 1.2em;
    margin-right: 25px;
    color: black;
    font-weight: 600;
}

nav form {
    margin-right: 50px;
}

nav button {
    background-color: #ff0000;
    color: white;
    border: none;
    padding: 10px;
    font-size: 1em;
    cursor: pointer;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

nav button:hover {
    background-color: #cc0000;
}
.popup {
            display: none;
            position: fixed;
            left: 0;
            top: -18%;
            width: 100%;
            height: 100%;
           
            z-index: 1000;
        }

        .popup-content {
            color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 5px;
            width: 80%;
            max-width: 600px;
            max-height: 80%;
            overflow-y: auto;
            background-color: rgba(0,0,0,0.9);
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .action-button {
            padding: 5px 10px;
            margin-right: 5px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .view-bill {
            background-color: #007bff;
            color: white;
        }

        .view-details {
            background-color: #17a2b8;
            color: white;
        }

        .action-button:hover {
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <nav>
        <div class="logo">
            <img src="/images/BitBox_logo1.png" alt="BitBox Logo">
        </div>
        <div class="title">
            Bitbox Admin Panel
        </div>
        <form action="/api/auth/logout" method="POST">
            <button type="submit">Logout</button>
        </form>
    </nav>

    <div id="detailsPopup" class="popup">
        <div class="popup-content">
            <span class="close">&times;</span>
            <h2>Product Details</h2>
            <div id="popupContent"></div>
        </div>
    </div>
        <div class="container">
            <div class="search-bar">
                <input type="text" id="search-input" placeholder="Search by Certificate Number or Status" style="width: 500px;">
            </div>
            <p id="noResultsMessage" style="display: none; text-align: center; color: red;">No results found</p>
            <div class="tickets" id="tickets"></div>
        </div>
    

   

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            fetchStatusOptions().then(loadTickets);
        });

        let statusOptions = [];

        async function fetchStatusOptions() {
            try {
                const response = await fetch('/api/ticketManagement/statusOptions');
                const data = await response.json();
                statusOptions = data.map(option => option.status); // Assuming each option has a `status` field
            } catch (error) {
                console.error('Error fetching status options:', error);
            }
        }

        function loadTickets() {
            fetch('/api/ticketManagement/tickets')
                .then(response => response.json())
                .then(data => {
                    displayTickets(data);
                });
        }

        function displayTickets(tickets) {
            const ticketsContainer = document.getElementById('tickets');
            const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;

            ticketsContainer.innerHTML = '';
            ticketsContainer.style.display = 'block';

            if (tickets.length === 0) {
                document.getElementById('noResultsMessage').style.display = 'block';
            } else {
                document.getElementById('noResultsMessage').style.display = 'none';
                tickets.forEach(ticket => {
                    const ticketItem = document.createElement('div');
                    ticketItem.className = 'ticket-item';
                    ticketItem.innerHTML = `
                        <p><strong>Phone Number:</strong> ${ticket.phoneNumber}</p>
                        <p><strong>Email ID:</strong> ${ticket.emailId}</p>
                        <p><strong>Serial Number:</strong> ${ticket.serialNumber}</p>
                        <p><strong>Message:</strong> ${ticket.message}</p>
                        <p><strong>Status:</strong> ${ticket.status}</p>
                        <div class="status-dropdown">
                            <select id="status-${ticket._id}">
                                ${statusOptions.map(option => `<option value="${option}" ${ticket.status === option ? 'selected' : ''}>${option}</option>`).join('')}
                            </select>
                            <button class="update-button" onclick="updateStatus('${ticket._id}')">Update Status</button>
                        </div>
                        <br>
                        <div>
                            <button class="action-button view-bill" onclick="viewBillPdf('${ticket.serialNumber}')">View Bill PDF</button>
                            <button class="action-button view-details" onclick="viewSerialDetails('${ticket.serialNumber}')">View Details</button>
                        </div>
                    `;
                    ticketsContainer.appendChild(ticketItem);
                });
            }

            window.scrollTo(0, scrollPosition);
        }

        function viewBillPdf(serialNumber) {
    fetch(`/api/ticketManagement/billPdf/${serialNumber}`)
        .then(response => response.json())
        .then(data => {
            if (data.billPdf) {
                // Remove the API path if it's present in the URL
                const pdfUrl = data.billPdf.replace('/api/ticketManagement', '');
                
                // Ensure the URL starts with a forward slash
                const fullPdfUrl = pdfUrl.startsWith('/') ? pdfUrl : `/${pdfUrl}`;
                
                // Open the PDF in a new tab
                window.open(fullPdfUrl, '_blank');
            } else {
                alert('Bill PDF not found for this serial number.');
            }
        })
        .catch(error => {
            console.error('Error fetching bill PDF:', error);
            alert('Error fetching bill PDF.');
        });
}

        function viewSerialDetails(serialNumber) {
    fetch(`/api/ticketManagement/serialDetails/${serialNumber}`)
        .then(response => response.json())
        .then(data => {
            const popup = document.getElementById('detailsPopup');
            const content = document.getElementById('popupContent');
            content.innerHTML = '';
            
            for (const [key, value] of Object.entries(data)) {
                if (value) {
                    if (key === 'dynamicFields' && typeof value === 'object') {
                        content.innerHTML += `<h3>Dynamic Fields:</h3>`;
                        for (const [dynamicKey, dynamicValue] of Object.entries(value)) {
                            content.innerHTML += `<p><strong>${dynamicKey}:</strong> ${dynamicValue}</p>`;
                        }
                    } else {
                        content.innerHTML += `<p><strong>${key}:</strong> ${value}</p>`;
                    }
                }
            }

            popup.style.display = 'block';
        })
        .catch(error => {
            console.error('Error fetching serial details:', error);
            alert('Error fetching serial details.');
        });
}

        // Close popup when clicking the close button or outside the popup
        window.onclick = function(event) {
            const popup = document.getElementById('detailsPopup');
            if (event.target == popup || event.target.className == 'close') {
                popup.style.display = 'none';
            }
        }

        function updateStatus(ticketId) {
            const newStatus = document.getElementById(`status-${ticketId}`).value;
            console.log(newStatus);
            fetch(`/api/ticketManagement/updateStatus/${ticketId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: newStatus }),
            })
            .then(response => response.json())
            .then(data => {
                alert('Status updated successfully');
                loadTickets(); // Reload the tickets after updating the status
            })
            .catch(error => {
                console.error('Error updating status:', error);
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
    fetchStatusOptions().then(loadTickets);

    // Add event listener for search input
    document.getElementById('search-input').addEventListener('input', function() {
        const query = this.value.trim();
        if (query) {
            searchTickets(query);
        } else {
            loadTickets();
        }
    });
});

function searchTickets(query) {
    fetch(`/api/ticketManagement/search/${query}`)
        .then(response => response.json())
        .then(data => {
            displayTickets(data);
        })
        .catch(error => {
            console.error('Error searching tickets:', error);
        });
}

    </script>
</body>
</html>
